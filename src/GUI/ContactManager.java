/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.event.KeyEvent;
import java.io.*;
import java.sql.*;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author irhas
 */
public class ContactManager extends javax.swing.JFrame {

    /**
     * Creates new form ContactManager
     */
    public ContactManager() {
        initComponents();
        loadContacts();//mengambil data kontak lengkap dari db ke table
        loadNamaKontak();//mengambil data nama kontak saja dari db ke JList listkontak

        // Tambahkan event listener ke tombol
        AddNewContactBtn.addActionListener(e -> addContact());
        EditContactBtn.addActionListener(e -> editContact());
        DelContactBtn.addActionListener(e -> deleteContact());
        SearchContactBtn.addActionListener(e -> searchContact());
        clearBtn.addActionListener(e -> clearForm());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        listContact = new javax.swing.JTable();
        jSeparator2 = new javax.swing.JSeparator();
        contNama = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        contNmrHp = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        contKategori = new javax.swing.JComboBox<>();
        AddNewContactBtn = new javax.swing.JButton();
        SearchContactBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        EditContactBtn = new javax.swing.JButton();
        DelContactBtn = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        listnamakontak = new javax.swing.JList<>();
        jLabel6 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        clearBtn = new javax.swing.JButton();
        ExportContactBtn = new javax.swing.JButton();
        ExportContactBtn1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Bahnschrift", 1, 24)); // NOI18N
        jLabel1.setText("Pengelola Kontak");

        listContact.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nama Lengkap", "Nomor Telp.", "Kategori"
            }
        ));
        listContact.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listContactMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listContact);

        jScrollPane2.setViewportView(jScrollPane1);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        contNama.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        contNama.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contNamaActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        jLabel3.setText("No. Telp");

        contNmrHp.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        contNmrHp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                contNmrHpKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        jLabel4.setText("Kategori");

        contKategori.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        contKategori.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Keluarga", "Teman", "Rekan Kerja" }));

        AddNewContactBtn.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        AddNewContactBtn.setText("Simpan Kontak");
        AddNewContactBtn.setPreferredSize(new java.awt.Dimension(145, 27));
        AddNewContactBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNewContactBtnActionPerformed(evt);
            }
        });

        SearchContactBtn.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        SearchContactBtn.setText("Cari Kontak");
        SearchContactBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchContactBtnActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        jLabel5.setText("Nama");

        EditContactBtn.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        EditContactBtn.setText("Edit Kontak");
        EditContactBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditContactBtnActionPerformed(evt);
            }
        });

        DelContactBtn.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        DelContactBtn.setText("Hapus Kontak");
        DelContactBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DelContactBtnActionPerformed(evt);
            }
        });

        jScrollPane3.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N

        listnamakontak.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        listnamakontak.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listnamakontak.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        listnamakontak.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listnamakontakValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(listnamakontak);

        jScrollPane4.setViewportView(jScrollPane3);

        jLabel6.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        jLabel6.setText("Daftar Nama Kontak");

        clearBtn.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        clearBtn.setText("Bersihkan");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        ExportContactBtn.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        ExportContactBtn.setText("Ekspor Kontak");
        ExportContactBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportContactBtnActionPerformed(evt);
            }
        });

        ExportContactBtn1.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        ExportContactBtn1.setText("Impor Kontak");
        ExportContactBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportContactBtn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 557, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(EditContactBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(DelContactBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSeparator4)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(AddNewContactBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(SearchContactBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel3))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(contKategori, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(contNmrHp))))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 1, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(clearBtn)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addGap(41, 41, 41)
                                                .addComponent(contNama, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(4, 4, 4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(11, 11, 11))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(ExportContactBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ExportContactBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6)
                        .addGap(1, 1, 1)
                        .addComponent(jScrollPane4))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(contNama, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(contNmrHp, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(contKategori, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AddNewContactBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SearchContactBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DelContactBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EditContactBtn)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ExportContactBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ExportContactBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 591, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void contNamaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contNamaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_contNamaActionPerformed

    private void AddNewContactBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddNewContactBtnActionPerformed

    }//GEN-LAST:event_AddNewContactBtnActionPerformed

    private void SearchContactBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchContactBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchContactBtnActionPerformed

    private void EditContactBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditContactBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EditContactBtnActionPerformed

    private void DelContactBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DelContactBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DelContactBtnActionPerformed

    private void listnamakontakValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listnamakontakValueChanged
    if (!evt.getValueIsAdjusting()) { // Memastikan hanya saat perubahan akhir
            String namaKontak = listnamakontak.getSelectedValue();
            if (namaKontak != null) {
                // Muat data kontak berdasarkan nama yang dipilih
                loadContactData(namaKontak);
            }
        }
    }//GEN-LAST:event_listnamakontakValueChanged

    private void contNmrHpKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_contNmrHpKeyTyped
        validasiAngka(evt);
    }//GEN-LAST:event_contNmrHpKeyTyped

    private void listContactMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listContactMouseClicked
    if (evt.getClickCount() == 1) { // Jika baris diklik dua kali
                int selectedRow = listContact.getSelectedRow(); // Ambil indeks baris yang dipilih
                if (selectedRow != -1) { // Pastikan ada baris yang dipilih
                    String nama = listContact.getValueAt(selectedRow, 1).toString(); // Ambil nama dari kolom kedua
                    loadContactData(nama); // Panggil fungsi untuk memuat data ke form
                }
            }
    }//GEN-LAST:event_listContactMouseClicked

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clearBtnActionPerformed

    private void ExportContactBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportContactBtnActionPerformed
        exportToCSV(); // Panggil fungsi exportToCSV saat tombol di-klik
    }//GEN-LAST:event_ExportContactBtnActionPerformed

    private void ExportContactBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportContactBtn1ActionPerformed
        importFromCSV();
    }//GEN-LAST:event_ExportContactBtn1ActionPerformed
    private DefaultTableModel getTableModel() {
        return (DefaultTableModel) listContact.getModel();
    }

    // Muat data listcontact ke JTable
    private void loadContacts() {
        DefaultTableModel tableModel = getTableModel();
        tableModel.setRowCount(0);  // Kosongkan tabel

        try {
            ResultSet rs = DatabaseHelper.executeQuery("SELECT * FROM listcontact");
            while (rs.next()) {
                tableModel.addRow(new Object[]{
                    rs.getInt("id"),
                    rs.getString("nama"),
                    rs.getString("nomorhp"),
                    rs.getString("kategori")
                });
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal memuat data.");
        }
    }

    // Tambah listcontact baru
    private void addContact() {
        String nama = contNama.getText();
        String nomor = contNmrHp.getText();
        String kategori = (String) contKategori.getSelectedItem();  // Ambil kategori

        // Validasi input nomor telepon
        if (!nomor.matches("\\d+")) {
            JOptionPane.showMessageDialog(this, "Nomor telepon harus berupa angka!");
            return;
        }

        // Cek apakah nomor telepon sudah ada
        if (isNomorHpExists(nomor)) {
            JOptionPane.showMessageDialog(this, "Nomor telepon sudah ada dalam kontak lain!");
            return;
        }

        String sql = String.format(
            "INSERT INTO listcontact (nama, nomorhp, kategori) VALUES ('%s', '%s', '%s')",
            nama, nomor, kategori
        );

        try {
            DatabaseHelper.executeUpdate(sql);
            loadContacts();  // Refresh tabel
            loadNamaKontak(); // Refresh nama kontak pada list
            JOptionPane.showMessageDialog(this, "Kontak berhasil ditambahkan!");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal menambahkan kontak: " + e.getMessage());
        }
    }

    
    private boolean isNomorHpExists(String nomorHp) {
        String sql = "SELECT COUNT(*) FROM listcontact WHERE nomorhp = ?";

        try (PreparedStatement pstmt = DatabaseHelper.getConnection().prepareStatement(sql)) {
            pstmt.setString(1, nomorHp);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0; // Jika ada satu atau lebih hasil, nomor sudah ada
            }
        } catch (SQLException e) {
            
        }
        return false; // Nomor tidak ada
    }


    // Edit listcontact yang dipilih
    private void editContact() {
        String nama = contNama.getText();
        String nomor = contNmrHp.getText();
        String kategori = (String) contKategori.getSelectedItem(); // Ambil kategori
        int selectedRow = listContact.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih kontak yang ingin diedit.");
            return;
        }

        // Ambil ID kontak yang sedang diedit dari tabel
        int id = (int) listContact.getValueAt(selectedRow, 0); // Misalkan kolom ID ada di index 0

        // Cek jika nomor telepon baru sudah ada di kontak lain, kecuali kontak yang sedang diedit
        if (isNomorHpExists(nomor) && !nomor.equals(listContact.getValueAt(selectedRow, 2))) { // Asumsikan nomor telepon ada di kolom index 2
            JOptionPane.showMessageDialog(this, "Nomor telepon sudah digunakan oleh kontak lain!");
            return;
        }

        String sql = "UPDATE listcontact SET nama = ?, nomorhp = ?, kategori = ? WHERE id = ?";
        try (Connection conn = DatabaseHelper.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, nama);
            pstmt.setString(2, nomor);
            pstmt.setString(3, kategori);
            pstmt.setInt(4, id);
            pstmt.executeUpdate();
            loadContacts(); // Refresh tabel
            loadNamaKontak(); // Refresh nama kontak pada list
            JOptionPane.showMessageDialog(this, "Kontak berhasil diupdate!");
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mengupdate kontak: " + e.getMessage());
        }
    }


    // Hapus listcontact yang dipilih
    private void deleteContact() {
        int selectedRow = listContact.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih listcontact yang ingin dihapus.");
            return;
        }

        int id = (int) getTableModel().getValueAt(selectedRow, 0);

        String sql = "DELETE FROM listcontact WHERE id=" + id;

        try {
            DatabaseHelper.executeUpdate(sql);
            loadContacts();  // Refresh tabel
            loadNamaKontak(); //refresh nama kontak pada list
            JOptionPane.showMessageDialog(this, "Kontak berhasil dihapus!");
        } catch (SQLException e) {
        }
    }

    // Cari listcontact berdasarkan nama atau nomor telepon
    private void searchContact() {
        String keyword = contNama.getText();

        String sql = String.format(
            "SELECT * FROM listcontact WHERE nama LIKE '%%%s%%' OR nomorhp LIKE '%%%s%%'",
            keyword, keyword
        );

        try {
            ResultSet rs = DatabaseHelper.executeQuery(sql);
            DefaultTableModel tableModel = getTableModel();
            tableModel.setRowCount(0);  // Kosongkan tabel
            while (rs.next()) {
                tableModel.addRow(new Object[]{
                    rs.getInt("id"),
                    rs.getString("nama"),
                    rs.getString("nomorhp"),
                    rs.getString("kategori")
                });
            }
        } catch (SQLException e) {
        }
    }
    
    private void loadNamaKontak() { //ambil data dari db, masukkan ke list nama kontak
        DefaultListModel<String> model = new DefaultListModel<>();
        try (Connection conn = DatabaseHelper.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT nama FROM listcontact")) {

            while (rs.next()) {
                // Ambil nama dan tambahkan ke model JList
                String nama = rs.getString("nama");
                model.addElement(nama);
            }
        } catch (SQLException e) {
            // Cetak stack trace jika terjadi error
            
        }
        // Set model untuk JList
        listnamakontak.setModel(model);
    }
    
    private void loadContactData(String nama) { //ambil data dari db, masukkan ke form saat list nama kontak dipilih
        try (Connection conn = DatabaseHelper.getConnection();
             PreparedStatement pstmt = conn.prepareStatement("SELECT * FROM listcontact WHERE nama = ?")) {
            pstmt.setString(1, nama);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                // Ambil data dari ResultSet dan set ke form
                int id = rs.getInt("id");
                String nomorTelepon = rs.getString("nomorhp");
                String kategori = rs.getString("kategori");

                // Set data ke form
                contNama.setText(nama);
                contNmrHp.setText(nomorTelepon);
                contKategori.setSelectedItem(kategori); // Jika contCategory adalah JComboBox
            }
        } catch (SQLException e) {
            // Cetak stack trace jika terjadi error
            
        }
    }
    
    private void validasiAngka(KeyEvent evt) {
        char c = evt.getKeyChar();
        String inputText = contNmrHp.getText();

        // Batalkan input jika bukan angka atau tombol backspace
        if (!Character.isDigit(c) && c != '\b') {
            evt.consume(); // Batalkan input
            JOptionPane.showMessageDialog(this, 
                "Hanya angka yang diperbolehkan!", 
                "Error Input", 
                JOptionPane.ERROR_MESSAGE);
        } else if (inputText.length() >= 14 && c != '\b') { // Maksimal 14 digit
            evt.consume(); // Batalkan input
            JOptionPane.showMessageDialog(this,
                "Nomor telepon maksimal 15 digit!", 
                "Error Input", 
                JOptionPane.ERROR_MESSAGE);
        } 
    }

    private void clearForm() {
        // Bersihkan text field dan combo box
        contNama.setText("");
        contNmrHp.setText("");
        contKategori.setSelectedIndex(0); // Reset ke item pertama

        // Reset JList dan JTable untuk tidak ada yang dipilih
        listContact.clearSelection(); // Tidak ada yang dipilih di JTable
        listnamakontak.clearSelection(); // Tidak ada yang dipilih di JList

        // Jika kamu menggunakan JList, pastikan untuk menambahkan kode untuk meng-clear pemilihan
        // listNamaKontak.clearSelection(); // Jika listNamaKontak adalah JList yang digunakan
    }

    private void exportToCSV() {
        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Simpan File CSV");

            // Atur nama file default
            File defaultFile = new File("data_kontak.csv");
            fileChooser.setSelectedFile(defaultFile); // Set nama file default

            int userSelection = fileChooser.showSaveDialog(this);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File fileToSave = fileChooser.getSelectedFile();
                BufferedWriter writer = new BufferedWriter(new FileWriter(fileToSave));

                // Menulis header
                writer.write("ID,Nama Lengkap,Nomor Telepon,Kategori");
                writer.newLine();

                // Menulis data dari JTable
                DefaultTableModel model = (DefaultTableModel) listContact.getModel();
                for (int i = 0; i < model.getRowCount(); i++) {
                    StringBuilder row = new StringBuilder();
                    for (int j = 0; j < model.getColumnCount(); j++) {
                        row.append(model.getValueAt(i, j).toString());
                        if (j < model.getColumnCount() - 1) {
                            row.append(","); // Tambahkan koma sebagai pemisah
                        }
                    }
                    writer.write(row.toString());
                    writer.newLine();
                }
                writer.close();
                JOptionPane.showMessageDialog(this, "Kontak berhasil diekspor ke " + fileToSave.getAbsolutePath());
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mengekspor file: " + e.getMessage());
        }
    }
    
    private void importFromCSV() {
    try {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Pilih File CSV");
        int userSelection = fileChooser.showOpenDialog(this);
        
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            
            File fileToOpen = fileChooser.getSelectedFile();
            BufferedReader reader = new BufferedReader(new FileReader(fileToOpen));
            String line;
            reader.readLine(); // Mengabaikan header
            
            Connection conn = DatabaseHelper.getConnection();
            String sql = "INSERT INTO listcontact (nama, nomorhp, kategori) VALUES (?, ?, ?)";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(","); // Pisahkan berdasarkan koma
                if (data.length == 4) { // Pastikan ada 4 kolom
                    pstmt.setString(1, data[1]); // Nama
                    pstmt.setString(2, data[2]); // Nomor telepon
                    pstmt.setString(3, data[3]); // Kategori
                    pstmt.executeUpdate();
                }
            }
            reader.close();
            pstmt.close();
            conn.close();
            loadContacts(); // Refresh tabel setelah impor
            loadNamaKontak();
            JOptionPane.showMessageDialog(this, "Kontak berhasil diimpor dari " + fileToOpen.getAbsolutePath());
        }
    } catch (IOException | SQLException e) {
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mengimpor file: " + e.getMessage());
    }
}




    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ContactManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ContactManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ContactManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ContactManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ContactManager().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddNewContactBtn;
    private javax.swing.JButton DelContactBtn;
    private javax.swing.JButton EditContactBtn;
    private javax.swing.JButton ExportContactBtn;
    private javax.swing.JButton ExportContactBtn1;
    private javax.swing.JButton SearchContactBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JComboBox<String> contKategori;
    private javax.swing.JTextField contNama;
    private javax.swing.JTextField contNmrHp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTable listContact;
    private javax.swing.JList<String> listnamakontak;
    // End of variables declaration//GEN-END:variables
}
